#!/usr/bin/python

#
# Copyright 2018 Armin Briegel, Scripting OS X
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A tool that helps manage and manipulate configuration profiles."""

import os
import sys
import subprocess
import plistlib
import uuid
import tempfile
import shutil

import argparse


# global variables

profiletool_version = '0.1'
args = []

profile_extension = '.mobileconfig'
signed_suffix = '_signed'
unsign_suffix = '_unsigned'
id_prefix = "com.scriptingosx"
tmpdir = tempfile.mkdtemp()


# profile

class Profile:
    def __init__(self, path):
        self.data = {}
        self.signed = False
        self.signature = ""
        self.path = path
        
        # sanity check: mobileconfig
        basename=os.path.basename(path)
        (self.filename, extension) = os.path.splitext(basename)

        if not extension == profile_extension:
            print >> sys.stderr, ("not a mobile config: %s" % path)
            exit(1)
     
        # sanity check: does the path exist?
        if not os.path.exists(path):
            print >> sys.stderr, ("no file: %s" % path)
            exit(1)
    
        # sanity check: is it a file
        if not os.path.isfile(path):
            print >> sys.stderr, ("%s is not a file", path)
            exit(1)
    
        # sanity check: ist the file readable?
        if not os.access(path, os.R_OK):
            print >> sys.stderr, ("cannot read file: %s" % path)
            exit(1)
    
        try:
            self.data=plistlib.readPlist(path)
        except:
            # file might be signed, try to unsign
            cmd=["/usr/bin/security", "cms", "-D", "-h1", "-i", path]
            result=cmdexec(cmd)
            if result["return_code"] == 0:
                self.signed = True
                out=result["stdout"]
                xmlstart=out.index("<?xml")
                self.signheader=out[:xmlstart]
                self.data=plistlib.readPlistFromString(out[xmlstart:])
            else:
                print >> sys.stderr, ("could not read file: %s" % path)
                exit(1)
    
    # class methods for accessing data
    def __getitem__(self, key): 
        if (key in self.data.keys()):
            return self.data[key]
    
    def __setitem__(self, key, item): 
        self.data[key] = item
    
    def __delitem__(self, key): del self.data[key]

    # some methods to simply access
    @property
    def name(self):
        return self.data["PayloadDisplayName"]
    @name.setter
    def name(self, value):
        self.data["PayloadDisplayName"] = value
    
    @property
    def identifier(self):
        return self.data["PayloadIdentifier"]
    @identifier.setter
    def identifier(self, value):
        self.data["PayloadIdentifier"] = value
    
    @property
    def uuid(self):
        return self.data["PayloadUUID"]
    @uuid.setter
    def uuid(self, value):
        self.data["PayloadUUID"] = value

    @property
    def payloads(self):
        return self.data["PayloadContent"]
   
    # write the profile to a file
    def write(self, path, identity = None):
        if identity == None:
            plistlib.writePlist(self.data, path)
        else:
            # TODO: sanity check if identity exists?
            tmppath=os.path.join(tmpdir, self.filename + profile_extension)
            plistlib.writePlist(self.data, tmppath)
            cmd=["/usr/bin/security", "cms", "-S", "-N", identity, "-i", tmppath, "-o", path]
            result=cmdexec(cmd)
            os.remove(tmppath)

# utility functions

def logger(log, v=0):
    if args.verbosity >= v:
        print log


def cmdexec(command):
    """Execute a command."""
    # if 'command' is a string, split the string into components
    if isinstance(command, str):
        command = command.split()

    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = proc.communicate()

    logger("cmdexec: %s, result: %s, error: %s" % (command, stdout, stderr), 3)

    # strip trailing whitespace, which would mess with string comparisons
    return {"return_code": proc.returncode, "stderr": stderr.rstrip(), "stdout": stdout.rstrip()}
    
    
# actions

def unsign_profile(profile):
    if profile.signed:
        filename = profile.filename + unsign_suffix + profile_extension
        profile.write(filename)
    else:
        print >> sys.stderr, "%s is not signed." % profile.path
    return



def sign_profile(profile):
    # sanity check: is an identity given?
    if args.identity == None or args.identity == "":
        print >> sys.stderr, "The sign action requires an '--identity'!"
        exit(1)
    filename = profile.filename + signed_suffix + profile_extension
    profile.write(filename, args.identity)
    return



def check_profile_signature(profile):
    if profile.signed:
        print profile.path
        print profile.signheader
    else:
        print "%s: not signed" % profile.path

    return



def split_profile(profile):
    return



def merge_profiles(profile):
    return



def reset_profile_uuids(profile):
    profile.uuid = str(uuid.uuid1())
    for p in profile.payloads:
        p["PayloadUUID"] = str(uuid.uuid1())
    filename = profile.filename + "_resetuuids" + profile_extension
    profile.write(filename)
    return



def reset_profile_identifiers(profile):
    return



def print_profile(profile):
    print "Name:               " + profile.name
    print "Identifier:         " + profile.identifier
    print "UUID:               " + profile.uuid
    print "Organization:       " + profile["PayloadOrganization"]
    print "Scope:              " + profile["PayloadScope"]
    print "RemovalDisallowed:  " + str(profile["PayloadRemovalDisallowed"])
    print "Signed:             " + str(profile.signed)
    print "Description:        " + profile["PayloadDescription"]
    print "Payloads:           " + str(len(profile["PayloadContent"]))
    for p in profile.payloads:
        print " " + str(profile.payloads.index(p))
        print "  Name:             " + p["PayloadDisplayName"]
        print "  Type:             " + p["PayloadType"]
        print "  Identifier:       " + p["PayloadIdentifier"]
        print "  UUID:             " + p["PayloadUUID"]
    print

    return



if __name__ == "__main__":
    actions = {
        'unsign': unsign_profile,
        'sign': sign_profile,
        'check-signature': check_profile_signature,
        'check-sign': check_profile_signature,
        'check-sig': check_profile_signature,
        'check': check_profile_signature,
        'split': split_profile,
        'merge': merge_profiles,
        'reset-uuids': reset_profile_uuids,
        'reset-identifiers': reset_profile_identifiers,
        'info': print_profile,
        }
    # step 0: parse input from cli

    # for convenience link to argparse tutorial:
    # https://docs.python.org/2/howto/argparse.html#id1
    parser = argparse.ArgumentParser(description='A tool that helps manage and manipulate configuration profiles.',
                                     epilog="""actions can be one of the following:
    unsign              removes a profile's signature
    sign                signs the profile
    check-signature     verifies the signature of a profile
    split               creates one new profile per payload of the original
    merge               combines the payload of multiple profiles
    reset-uuids         resets all PayloadUUID keys with new values
    reset-identifiers   resets all PayloadIdentifier keys with new values
    info                prints an overview of a profile's contents

    """, formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('--version', help='prints the version', action='version', version=profiletool_version)

    parser.add_argument('action', choices=sorted(actions.keys()), help='action to be applied to the profile(s)')

    parser.add_argument("-v", "--verbosity", action="count", default=0, help="controls amount of logging output (max -vvv)")

    
    parser.add_argument('--identity', help="name of the identity to use for the signature")
    
    parser.add_argument('profiles', help="configuration profile file", nargs='+')
    #parser.add_argument('extra_args', nargs=argparse.REMAINDER, help="extra arguments will be passed through to 'edit' and 'status' commands")

    # finally, actually parse the arguments
    args = parser.parse_args()
    logger(args, 3)

    # apply action to all items in profiles
    l = len(args.profiles)
    for p in args.profiles:
        profile=Profile(p)
        actions[args.action](profile)
    
    # cleanup
    shutil.rmtree(tmpdir)
